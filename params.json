{"name":"Filter.js","body":"Filter.js\r\n=============\r\n\r\nFilter.js is client-side JSON objects filter to show/hide html elements.\r\nMultiple filter criteria can be specified and used in conjunction with \r\neach other.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nCapture the JSON data (maybe using @people.to_json)\r\n\r\n    var people = [{person: {name: 'Jiren', age:26, country: 'India', country_id: 1, \r\n                            states : [{ state : 'MH', state_id : 3 }, {state : 'HN', state_id : 4}] } }, \r\n                  {person: {name: 'Joe', age:25, country: 'USA', country_id: 2,\r\n                            states : [{ state : 'MH', state_id : 3 }, {state : 'HN', state_id : 4}] } }\r\n                 ]\r\n\r\nView function call for every object of the people array. It will render \r\nthe HTML template.\r\n\r\n    var view = function(person){\r\n\r\n      name    = this.span({'class': 'name'}, person.name);\r\n      age     = this.span({'class': 'age'},  person.age);\r\n      country = this.div({'class': 'country'}, person.country);\r\n    \r\n      return this.link('/demo/' + person.id ,{'title': person.name}, [name,age,country]);\r\n    };\r\n\r\nSuppose you require some HTML element which is not currently supported in filter.js,\r\nyou can simply use the registerHtmlElement method to add this to your HTML views.\r\n\r\n    FilterJS.registerHtmlElement('article');\r\n\r\n    //Use arguments attributes, content\r\n    this.article({class: 'new'}, 'demo')\r\n  \r\nFilter criteria is defined in the follwing ways: \r\n\r\n    var settings = {\r\n      filter_criteria: {\r\n              country: ['#country_list input:checkbox .EVENT.click .SELECT.:checked', 'country_id'],\r\n              age: ['#age_list input:checkbox .EVENT.click .SELECT.:checked .TYPE.range', 'age'],\r\n              states: ['#state_list input:checkbox .EVENT.click .SELECT.:checked', 'states.ARRAY.state_id'],\r\n        },\r\n       callbacks = filter_callbacks, //Define below.\r\n       and_filter_on: false\r\n    };\r\n\r\nThe detailed explaination is here:\r\nFor category selections:\r\n\r\n    country: ['#country_list input:checkbox .EVENT.click .SELECT.:checked', 'country_id'],\r\n\r\nSelector: '#country_list input:checkbox': All the checkboxes in the div with id=\"country_list\"\r\n\r\nEvent   : .EVENT.click : This is the event on the selector that will trigger the filter.\r\n\r\nSelection Criteria: .SELECT.:checked : The criteria for filtering. (In this case, all selected checkboxes)\r\n\r\nJSON attribute: country_id : This is a JSON attribute defined in JSON objects for which filtering is done.\r\n\r\nFor Range selections,\r\n\r\n    age: ['#age_list input:checkbox .EVENT.click .SELECT.:checked .TYPE.range', 'age'],\r\n\r\nThe only thing that changes here is the additional field \r\n\r\nRange: .TYPE.range : It is expected to set ranges as values like '20-30', 'below-30', '30-above'.\r\n\r\nExample: \r\n\r\n    <input checked=\"checked\" value=\"20-30\" type=\"checkbox\">\r\n\r\nFor Array selections,\r\n\r\n    states: ['#state_list input:checkbox .EVENT.click .SELECT.:checked', 'states.ARRAY.state_id'],\r\n\r\nIf we need to look into a JSON array for the search criteria, we can use the .ARRAY. selector.\r\nThis would look into the states array and filter on the state_id\r\n\r\nCategroy 'AND', 'OR' selection criteria.If any categroy selection result is zero and 'and_filter_on' => 'true'\r\nthen no elements are shown.For 'and_filter_on' => 'false' zero result category ignored.\r\n\r\n    and_filter_on: true  //AND opration\r\n    and_filter_on: false //OR Opration\r\n\r\nFiltering Callbacks\r\n-------------------\r\n\r\nDefine callback in settings. Callbacks executes after each filtering events.(In examples folder: 'filterjs-map.html')\r\n\r\n    var filter_callbacks = {\r\n        gmap: function(result){\r\n          googleMap.updateMarkers(result);\r\n        },\r\n        logger: function(result){\r\n          $.each(result, function(i,v){ console.log(v.id)})\r\n        },\r\n        //Tinysort integration\r\n        tiny_sort: function() {\r\n           $('a[data-fjs]').tsort('.fs_price:visible', {order: 'asc'})\r\n        }\r\n    };\r\n\r\nIf want to execute callback on init set configuration in setting\r\n\r\n    exec_callbacks_on_init: true\r\n  \r\n\r\n\r\n\r\nTriggering the filter\r\n---------------------\r\n\r\n    var fJS = FilterJS(people, \"#people_list\", view, settings);\r\n\r\nThis will render each JSON object to html and append to '#people_list' div.\r\nSecond arg is object render function which can be customized as show above.\r\n\r\nFilter using link\r\n-----------------\r\n\r\nDefine link with hidden input. Link data-target is hidden input id and data-value is use to set \r\nhidden input value.\r\n\r\n    <a id=\"filter_by_link\" href=\"#\" data-value=\"100-200\" data-target='#link_filter'>Price: 100 - 200</a>\r\n    <input type=\"hidden\" id=\"link_filter\"/>\r\n\r\nAdd filter criteria to setting.\r\n\r\n    link_filter: ['#link_filter .EVENT.change .SELECT.:input .TYPE.range', 'amount']\r\n\r\nTo clear filter. data-value set to data-taget element which is hidden field associated with link.\r\n\r\n    <a id=\"clear_link_filter\" href=\"#\" data-target=\"#link_filter\" data-value='0-above'>Clear</a>\r\n\r\nBind event on filter link and clear filter link. Here on click link data-value set to data-target element value.\r\n\r\n    $('#filter_by_link, #clear_link_filter').click(function(e){\r\n      e.preventDefault();\r\n      $($(this).data('target')).val($(this).data('value'));\r\n      fJS.filter();\r\n    });\r\n\r\n\r\nMustache.js integration\r\n-----------------------\r\n\r\n[https://github.com/janl/mustache.js](https://github.com/janl/mustache.js)\r\n\r\nDefine mustache.js template in html page.\r\n\r\n    <script id=\"person_template\" type=\"text/mustache\">\r\n      <a href=\"/demo/{{id}}\" title=\"{{name}}\">\r\n        <span class=\"name\">{{name}}</span>\r\n        <span class=\"age\">{{age}}</span>\r\n        <div class=\"country\">{{country}}</div>\r\n      </a>\r\n    </script>\r\n\r\nView function:\r\n\r\n    var mustache_template = $(\"#person_template\").html(); //Find template data.\r\n\r\n    var view = function(person){\r\n        return Mustache.to_html(mustache_template, person);\r\n    };\r\n\r\nJquery Template integration\r\n---------------------------\r\n\r\n[https://github.com/jquery/jquery-tmpl](https://github.com/jquery/jquery-tmpl)\r\n\r\nDefine jquery template in html page.\r\n\r\n    <script id=\"person_template\" type=\"text/x-jquery-tmpl\">\r\n      <a href=\"/demo/${id}\" title=\"${name}\">\r\n        <span class=\"name\">${name}</span>\r\n        <span class=\"age\">${age}</span>\r\n        <div class=\"country\">${country}</div>\r\n      </a>\r\n    </script>\r\n\r\nView function:\r\n\r\n    var jquery_template = $(\"#person_template\"); //Find template data.\r\n\r\n    var view = function(person){\r\n        return $.tmpl(jquery_template, person)\r\n    };\r\n\r\n\r\nDemo\r\n----\r\nTo see the sample demo, clone this repo and open demo/filterjs.html in your browser\r\n\r\n[Filter](http://jiren.github.com/filter.js/filterjs.html)\r\n\r\n[Filter with google map](http://jiren.github.com/filter.js/filterjs-map.html)\r\n\r\nExamples\r\n--------\r\n\r\n[GoodInKind Services](http://www.goodinkind.com/services)\r\n[GoodInKind NonProfits](http://www.goodinkind.com/nonprofits)\r\n[Dealacer (require soft registration)](http://dealacre.com/)\r\n\r\n\r\nIf you use this, please send me an email, I shall add your link here!\r\n\r\n\r\nChanges and New Functionality\r\n----------------------------\r\n\r\nv1.1\r\n  - And / Or filtering\r\n\r\nv1.2\r\n - Filtering Callbacks\r\n\r\n\r\nContributing\r\n------------\r\nPlease send me a pull request so that this can be improved.\r\n\r\nLicense\r\n-------\r\nThis is released under the MIT license.\r\n","tagline":"Client-side JS filtering of JSON objects and rendering HTML snippets via jQuery. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}